<!DOCTYPE HTML>
<html lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, viewport-fit=cover" />
<title>Nile Technologies</title>
<link rel="stylesheet" type="text/css" href="/styles/bootstrap.css">
<link rel="stylesheet" type="text/css" href="/styles/style.css">
<link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i,900,900i|Source+Sans+Pro:300,300i,400,400i,600,600i,700,700i,900,900i&display=swap" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="fonts/fontawesome/css/all.min.css">
<link rel="manifest" href="_manifest.json" data-pwa-version="set_in_manifest_and_pwa_js">
	<link rel="icon" type="image/png" href="images/logo/nile-logo.png"/>
 <link rel="apple-touch-icon" sizes="180x180" href="images/logo/nile-logo.png">
	
	
	<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
	
	
	<style>.d-flex div h1{display: inline;}
		#satalite_img{width: 100%;}</style>
</head>
	
	
<body class="detect-theme" data-highlight="highlight-green-dark" data-gradient="body-default">
	
<div id="preloader"><div class="spinner-border color-green-dark" role="status"></div></div>
	
<div id="page">
		
	<div class="page-content header-clear-small">
	
	<form method ="post" action="/createmap">
		

		<div class="card card-style">
			<div class="content mb-0">
				<div class="mt-n2">
					<div class="divider-icon divider-margins bg-gray-dark mx-5 mt-5"><i class="fas fa-farm font-33 mt-n3 color-green-dark bg-theme"></i></div>
				</div>
				<h1 class="text-center font-24">Select the location of your farm</h1>
				<p class="text-center mt-n2 opacity-50 font-12">Scroll in/out until your full farm is in view.</p>
				<img id="satalite_img">
					
					<div style="height:100vw; width:100%"id="map"></div>

					
			</div>
			<br>
			<br>
			<input type="hidden" name="first" value="" size ="40"/>
			<input type ="submit" class=" btn btn-full btn-xl shadow-large rounded-s text-uppercase font-900 bg-green-dark" value="Confirm Location"/>
			<br>
		</div>
	<form>

			
	</div>

	
	
	
	<!-- End of Page Content-->
	
</div>

<script
	  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDpbgp0DBCSEmr5yLxRxdOZZPncWHHKFMA&libraries=&v=weekly"
	  async
	></script>
<script type="text/javascript" src="/scripts/bootstrap.min.js"></script>
<script type="text/javascript" src="/scripts/custom.js"></script>
<script type="text/javascript" src="/scripts/jquery.js"></script>


<script>

var lat, lon;
	// Note: This example requires that you consent to location sharing when
	// prompted by your browser. If you see the error "The Geolocation service
	// failed.", it means you probably did not give permission for the browser to
	// locate you.
	let map, infoWindow;
	var bbox
	function initMap() {
	  map = new google.maps.Map(document.getElementById("map"), {
		center: { lat: lat, lng: lon },
		zoom: 15,
		mapTypeId: 'satellite'
	  });
	  
	  
	  
	  google.maps.event.addListener(map, "bounds_changed", function() {
		 // send the new bounds back to your server
		 
bbox = [
					 [map.getBounds().getSouthWest().lat(),map.getBounds().getSouthWest().lng()],
					 [map.getBounds().getNorthEast().lat(),map.getBounds().getNorthEast().lng()],
					 [map.getBounds().getSouthWest().lat(),map.getBounds().getSouthWest().lng()],
					 [map.getBounds().getNorthEast().lat(),map.getBounds().getNorthEast().lng()],
					 ]
		 
		 console.log(bbox);
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
	  });
	  infoWindow = new google.maps.InfoWindow();
	  const locationButton = document.createElement("button");
	  locationButton.textContent = "Pan to Current Location";
	  locationButton.classList.add("custom-map-control-button");
	  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
	  locationButton.addEventListener("click", () => {
		// Try HTML5 geolocation.
		if (navigator.geolocation) {
		  navigator.geolocation.getCurrentPosition(
			(position) => {
			  const pos = {
				lat: position.coords.latitude,
				lng: position.coords.longitude,
			  };
			  infoWindow.setPosition(pos);
			  infoWindow.setContent("Location found.");
			  infoWindow.open(map);
			  map.setCenter(pos);
			},
			() => {
			  handleLocationError(true, infoWindow, map.getCenter());
			}
		  );
		} else {
		  // Browser doesn't support Geolocation
		  handleLocationError(false, infoWindow, map.getCenter());
		}
	  });
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  getWeather()
	  
	  satalites()
	}

	function handleLocationError(browserHasGeolocation, infoWindow, pos) {
	  infoWindow.setPosition(pos);
	  infoWindow.setContent(
		browserHasGeolocation
		  ? "Error: The Geolocation service failed."
		  : "Error: Your browser doesn't support geolocation."
	  );
	  infoWindow.open(map);
	}


function doSomething(l1, l2){
	lat = l1
	lon = l2
	console.log(lat,lon)
	
	initMap()
}

function success(position) {
  doSomething(position.coords.latitude, position.coords.longitude);
}

function error() {
  alert('Sorry, no position available.');
}

const options = {
  enableHighAccuracy: true,
  maximumAge: 30000,
  timeout: 27000
};

const watchID = navigator.geolocation.watchPosition(success, error, options);







	  function getWeather(){
		  
		  console.log('get weather')
	
	  //We use geolocation API in order to get the current lat and lon.
	  //if ("geolocation" in navigator) {
	//	navigator.geolocation.getCurrentPosition(function(position) {
		  var url = getWeatherAPIURL(lat, lon);
		  console.log(url);
		  
		  
		  // current weather
		  $.getJSON(url, function(data){
			//console.log(data.weather[0].main);
			console.log(data);
		  });
		  
		  
		  // polition data
		  var appid = '2cf8e43f22320845ed1cd549555dc43d';
		  $.getJSON('http://api.openweathermap.org/data/2.5/air_pollution?lat='+lat+'&lon='+lon+'&appid='+appid, function(data){
			//console.log(data.weather[0].main);

			
			var e = data.list[0]
			//console.log(data)
			console.log(e.main.aqi);
			
			
			
			$('#CO').text(e.components.co)
			$('#NH3').text(e.components.nh3)
			$('#NO').text(e.components.no)
			$('#NO2').text(e.components.no2)
			$('#O3').text(e.components.o3)
			$('#PM25').text(e.components.pm2_5)
			$('#PM10').text(e.components.pm10)
			$('#SO2').text(e.components.so2)

			console.log(e.components.co); // CO (Carbon monoxide), μg/m3
			console.log(e.components.nh3); // NO (Nitrogen monoxide), μg/m3
			console.log(e.components.no); // NO2 (Nitrogen dioxide), μg/m3
			console.log(e.components.no2); // O3 (Ozone), μg/m3
			console.log(e.components.o3); // SO2 (Sulphur dioxide), μg/m3
			console.log(e.components.pm2_5); // PM2.5 (Fine particles matter), μg/m3
			console.log(e.components.pm10); // PM10 (Coarse particulate matter), μg/m3
			console.log(e.components.so2); // NH3 (Ammonia), μg/m3
	

			
			/*co: 293.73
			 nh3: 4.24
	no: 0
	no2: 17.31
	o3: 76.53
	pm2_5: 4.39
	pm10: 7.76
	so2: 0.7**/
		  });
		  
		  
		  
		  // one call API
		  $.getJSON('http://api.openweathermap.org/data/2.5/onecall?lat='+lat+'&lon='+lon+'&appid='+appid, function(data){
			//console.log(data.weather[0].main);
			console.log(data);
		  });
		//  https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}
		  
		  
	//	});
	//  } else {
		/* geolocaiton IS NOT available */
	//	console.log("ERROR: geolocaiton IS NOT available");
	//  }
	}

	function getWeatherAPIURL(lat, lon) {
	  var appid = '2cf8e43f22320845ed1cd549555dc43d';
	  return 'http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&appid='+appid;
	}


//http://maps.openweathermap.org/maps/2.0/weather/TA2/20/'+lat+'/'+lon+'?date=1527811200&opacity=0.9&fill_bound=true&palette=0:FF0000;10:00FF00;20:0000FF&appid=2cf8e43f22320845ed1cd549555dc43d

	//getWeatherData();
	
	
		  /*
		  var proxy = 'https://cors-anywhere.herokuapp.com/';

	  var Ip = 'https://ipinfo.io/json';

	//	 $.getJSON(Ip, function(data) {
		  var city = data.city;
		  var region = data.region;
		  var country = data.country;

		  var KEY = 'caf571f3ca8482a440838085017a419b';

		  var URL ='https://api.openweathermap.org/data/2.5/weather?' + lat + '&lon=' + lon +'&appid=' + KEY;
	//	  api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}

		  $.getJSON(proxy + URL, function(data) {
			  console.log(data)
			  /*
			var type = data.weather[0].main;  //array 0 index
			var id = data.weather[0].id; //array 0 index
			var city = data.name;

			var tempCel = Math.round(data.main.temp - 273.15);
			var tempC = tempCel + '°C';
			var weather = data.weather[0].description;
			var tempF = Math.round(tempCel * (9 / 5) + 32) + '°F';
			var icon = data.weather[0].icon;
			var tempBool = true;

			//Output data to display on the page
			$('#city').text(city);
			$('#state').text(region);
		   $('#temp').text(tempF); //Show Fahrenheit by Default
		   var weatherIcon = 'http://openweathermap.org/img/w/' + icon + '.png';
			$('#wIcon').html('<img src=' + weatherIcon + '>');


	   //Then toggle to switch between F and C temperature.
	   $('#btnToggle').on('click', function() {
			var temp = $('#temp');
			if (tempBool) {
				temp.html(tempC);
				tempBool = false
				} else {
				temp.html(tempF);
				tempBool = true;
			 }
		  }); //End of toggle function

		*///	});
		 //});
	//  }
	  
	  
	  
	  
	  function satalites(){
	  
	  /*
	  fetch(url).then(function(response) {
		  
		//  console.log(
		return response.json();
	  }).then(function(data) {
		console.log(data);
	  });
*/
}



// lat lon



var lat1, lon1;


lat1 = parseFloat(localStorage.getItem("lat"));
lon1= parseFloat(localStorage.getItem("lon"))
console.log(		lat1, lon1)


// agro api satillite data

//make id (use in dev)

function makeid(length) {
   var result           = '';
   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
   var charactersLength = characters.length;
   for ( var i = 0; i < length; i++ ) {
	  result += characters.charAt(Math.floor(Math.random() * charactersLength));
   }
   return result;
}

function createPoly(cor1, cor2, cor3, cor4, cor5, key, id){

	var polyID;


	json = {

		"name": id,
		"geo_json" : {
			"type": "Feature",
			"properties": {},
			"geometry": {
				"type": "Polygon",
				"coordinates": [
					[
						cor1,cor2,cor3,cor4,cor5
					]
				]
			}
		}
	}

	//TODO: update ajax to return polyID


	//add ajax function
	new Promise((resolve, reject) => {
			$.ajax({
				dataType: "json",
				contentType: "application/json",
				url: `http://api.agromonitoring.com/agro/1.0/polygons?appid=${key}`,
				type: "POST",
				async: false,
				data: JSON.stringify(json),
				success: function(data){
					polyID = data['id']
				}
			});
		});

	return polyID
}


var imageDate;

function searchSatillities(polyID,key){

	//get image info
	var res
	var start_date
	var end_date

	const day = ((60*60*24))
	const maxDays2Search = 10

	end_date = Math.round(+new Date()/1000);
	start_date = end_date - (maxDays2Search*day)

	new Promise((resolve, reject) => {
			$.ajax({
				dataType: "json",
				//contentType: "application/json",
				url: `http://api.agromonitoring.com/agro/1.0/image/search?start=${start_date}&end=${end_date}&polyid=${polyID}&appid=${key}`,
				type: "GET",
				success: function(data){
					
					console.log(data)
					console.log(data.length)
					mostRecent = data[data.length - 1]
					url = mostRecent['image']['truecolor']
					$('#satalite_img').attr("src", url);
					
					imageDate = Math.floor(mostRecent['dt'] * 1000)
					//console.log(mostRecent['dt'])
					showDate(imageDate)
	
				
					
				}
			})
		});
}
						  
						  
						  
function showDate(e){
		
	var d = new Date(e);
	console.log(d)
	var n = d.toDateString();
	document.getElementById("satalite_date").innerHTML = n;

		
	//	console.log()
		
	}

// search satalites
var api_key = '06bfa60682e4cbcd473244d9c6b9ddb5';
var id = makeid(7)

						  
						  
console.log(lat1, lon1)
		
						  
						  
						  cor1 = [lon1,	    lat1]
						  cor2 = [lon1-0.01, lat1]
						  cor3 = [lon1-0.01, lat1+0.01]
						  cor4 = [lon1,     lat1+0.01]
						  cor5 = [lon1,     lat1]
						  
						  
						  
				//		  33.4162891  111.7924244
/*cor1 = [-121,	37.6683]
cor2 = [-121.1, 37.6683]
cor3 = [-121.1, 37.6792]
cor4 = [-121,   37.6792]
cor5 = [-121,   37.6683]
*/

polyID = createPoly(cor1, cor2, cor3, cor4, cor5, api_key, id)
searchSatillities(polyID, api_key)

	</script>
</body>
